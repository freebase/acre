/*global $ JSON_JS console top */

/**********************************************/
/* For parsing and displaying json_js objects */
/**********************************************/

//TODO: support displaying JSON generated by object.toSource() or JSON.stringify()

var JSON_JS = (function() {
  if (typeof console === 'undefined') {
    var dummy = function() {};
    this.console = {info:dummy, log:dummy, warn:dummy, error:dummy};
  }
  var INHERTIED_SYMBOL = '\u21AA'; //RIGHTWARDS ARROW WITH HOOK
  var LINK_SYMBOL      = '\u2192'; //RIGHTWARDS ARROW
  var html;
  
  function quote(s) {
    if (typeof(s) !== 'string') {
      return '<span style="color:red">' + typeof(s) + ' ' + s + '</span>';
    } else {
      return s.replace(/\&/g,'&amp;')
        .replace(/</g,'&lt;')
        .replace(/>/g,'&gt;')
        .replace(/\"/g,'&quot;');
    }
  }
  
  function get_cons(obj) {
    var cons;
    if (obj && typeof obj['~~CONS~~'] !== 'undefined') {
      cons = obj['~~CONS~~'];
      delete obj['~~CONS~~'];
    }
    if (cons) {
      return '<span class="constructor">['+cons+']</span>';
    }
    return '';
  }
  
  function class_attr(classes) {
    if (!classes.length) { return ''; }
    return ' class="'+classes.join(' ')+'" ';
  }
  
  function get_class_of_value(v,overflow,skipped) {
    var t;
    if      (overflow) { t = 'overflow';}
    else if (skipped)  { t = 'skipped'; }
    else {
      t = typeof v;
      if (!v && typeof v === 'object') { t='null'; }
    }
    return 'class="'+t+'"';
  }
  
  function LINK(link_to) {
    return '<a class="link" href="#'+link_to+'">'+LINK_SYMBOL+'[object#'+link_to+']</a>';
  }
  
  function replace_key(key,new_key,holder) {
    var value = holder[key];
    delete holder[key];
    holder[new_key] = value;
    return new_key;
  }
  
  function replace_value(new_value,key,obj) {
    obj[key] = new_value;
    return new_value;
  }
  
  function get_func(obj) {
    if (obj && typeof obj['~~FUNC~~'] !== 'undefined') {
      var sig = obj['~~FUNC~~'];
      delete obj['~~FUNC~~'];
      //eval('func = function '+sig+' {}'); // create empty function
    }
    return sig;
  }
  
  /* dump_ function modify the global html variable */
  
  function dump_value(v) {
    var link_to = -1;
    var overflow = false, skipped = false;
    if (v && typeof v ==='string') {
      if (v.indexOf('~~LINK:')===0) {
        link_to = v.match(/~~LINK:(\d+)~~/)[1];
      } else if (v==='~~TOO_MANY_LINES~~' || v==='~~TOO_DEEP~~') {
        overflow = true;
      } else if (v==='~~SKIPPED~~') {
        v='';
        skipped = true;
      } else if (v==='~~UNDEFINED~~') {
        v = undefined; // change type
      }
    }
    
    if (link_to>-1) {
      html += LINK(link_to);
    } else {
      html += '<span '+get_class_of_value(v,overflow,skipped)+'>'+quote(''+v)+'</span>';
    }
    return v;
  }
  
  function get_type_and_id(obj) {
    if (!obj || typeof obj !== 'object') { return ['','']; }
    var id;
    if ('~~ID~~' in obj) {
      id = obj['~~ID~~'];
      delete obj['~~ID~~'];
      return ['object','object_id="'+id+'"'];
    }
    if (obj instanceof Array) {
      var str = obj[0];
      if (str.indexOf('~~ID:')===0) {
        id = str.match(/~~ID:(\d+)~~/)[1]; // take the number in the ID marker
        obj.shift(); // delete it
        return ['array','object_id="'+id+'"'];
      }
    }
    // non JSON_JS object
    return ['',''];
  }
  function dump_key(key,obj) {
    var key_str   = key;
    var classes = [];
    var object_id = '';
    
    if (key.indexOf('~~INHERTIED~~') !== -1) {
      key = key.replace('~~INHERTIED~~','');
      key_str = INHERTIED_SYMBOL + key;
      classes.push('inherited');
    }
    

    var cons = get_cons(obj);
    var func = get_func(obj) || ''; //WILL: can I reconstruct a function?
    var r =    get_type_and_id(obj);
    if (r[0]) { classes.push(r[0]); }
    object_id = r[1];
    html += '<li '+object_id+' key="'+key+'"'+class_attr(classes)+'><span class="key">'+quote(key_str)+': '+cons+func+'</span>';
    return key;
  }
  
  function dump_obj(obj) {
    var keys = [];
    for (var key in obj) { keys.push(key); }
    if (!(obj instanceof Array)) {
      keys = keys.sort();
    }
    if (keys.length) { 
      html += '<ul>';    
      for (var i in keys) {
        var k = keys[i];
        var v = obj[k];
        var new_key = dump_key(k,v); // starts with <li>
        if (new_key !== k) { k = replace_key(k, new_key, obj); } // update the real object
        if (v && typeof v === 'object') {
          dump_obj(v);
        } else {
          var new_value = dump_value(v);
          if (new_value !== v) { v = replace_value(new_value,k,obj); } // update the real object
        }
        html += '</li>';
      }
      html += '</ul>';
    } // else empty: // TODO:
  }

  function dump_one_object(obj,obj_name) {
    if (typeof top.FROM_ACRE === 'undefined') {
      top.FROM_ACRE = { object_count:0 };
    }
    var label = obj_name || null;
    if (obj && typeof obj === 'object') {
      top.FROM_ACRE.object_count++;
      if (!label) {
        label = 'Object'+top.FROM_ACRE.object_count;
      }
    
      
      if (typeof top.FROM_ACRE[label] !== 'undefined') {
        console.warn('top.FROM_ACRE.'+label+' already exists as ',top.FROM_ACRE[label], ' not setting to ',obj);
      }
      top.FROM_ACRE[label] = obj; // for easy reference in Firebug
      
      html += '<ul>';
      dump_key(label,obj); // starts with <li>
      dump_obj(obj);
      html += '</li></ul>';
    } else {
      html += '<span>';
      dump_value(obj); // format non-object
      html += '</span>';
    }
  }  
  
  
  //JSON_JS
  return {
    display : function(args,names) {
      html = '<div class="json-js-view">'; // must be div (can't put UL directly inside span)
      var obj_name;
      for (var i=0;i<args.length;i++) {
        if (names && names[i]) {
          obj_name= names[i];
        } else {
          obj_name = null; // use the global object counter
        }
        dump_one_object(args[i], obj_name);
      }
      html += '</div>';
      return html;
    }
  };
  
})();



/*************************************/
/* jQuery plugin for viewing objects */
/*************************************/

(function($) {
  
  var MAX_STRING_LENGTH = 150;
  
  function click_link(link) {
    var href = link.attr('href');
    var r = /^#(\d+)$/.exec(href);
    if (!r || r.length !== 2) { throw new Error('Invalid link '+href); }
    var link_to = r[1];
    var had_highlight = link.hasClass('highlight');
    $('.highlight').removeClass('highlight');
    if (!had_highlight) {
      link.addClass('highlight');
    }
    var parent_view = link.parents('.json-js-view');
    if (parent_view.length !== 1) { throw new Error('Link has more than one parent view'); }
    var link_to_elem = $('li[object_id='+link_to+']', parent_view);
    if (link_to_elem.length !== 1) { throw new Error('More than one target for link '+href); }
    if (!had_highlight) {
      link_to_elem.addClass('highlight');
    }
    return link_to_elem.children(':first'); // change the click target to be something inside the linked object
  }
  
  function move_objects_to_newline(view) {
    $('>ul',view).each(function() {
      var obj = $(this);
      var label = obj.find('.key:first').text().replace(/:.+/,''); // get the object's key, stip off the constructor
      obj.after('<span class="object">'+label+'</span>');
      obj.closest('.acre-dump').parent().addClass('json-js-view').append(obj);
    });
  }
  
  
  function get_path(e) {
    var target = $(e.target);
    
    if (target.hasClass('link')) {
      target = click_link(target); // pretend that we clicked on the link's target
    }
    var path = $.map(target.parents('li[key]'), function(li) {
      return $(li).attr('key');
    });
    path.push('FROM_ACRE');  // add the Acre Console namespace
    path = "top['" + path.reverse().join("']['") + "']";
    try {
      eval("top.$0 = "+path);
      console.info('Acre Console: Set $0 = '+path+' = ',top.$0);
    } catch(e) {
      console.error('Error in path "'+path+'" :'+e);
    }
  }
  
  //TODO: ideally this should be toggled by the same controller as the tree view
  var RIGHT_TRIANGLE = '\u25B8';
  var DOWN_TRIANGLE  = '\u25BE';

  function toggle_full_text() {
    var $text = $(this).next('.string');
    if (typeof $text[0].text_stored === 'undefined') { console.error('Tried to toggle string without text_stored ',$text); }

    // toggle the controller triangle
    $(this).text( $(this).text()==DOWN_TRIANGLE ? RIGHT_TRIANGLE : DOWN_TRIANGLE );
    
    // toggle the text
    var old_text = $text.text();
    $text.text($text[0].text_stored);
    $text[0].text_stored = old_text;
    return false;
  }
  function truncate_long_strings(view) {
    $('.string',view).each(function() {
      var elm = $(this);
      var text = elm.text();
      var len = ' ('+text.length+' chars)';
      if (text.length > MAX_STRING_LENGTH) {
        var new_text = text.slice(0,MAX_STRING_LENGTH) + '...';
        elm.text(new_text);
        this.text_stored = text;
        var controller = $('<span class="str-controller unigeo">'+RIGHT_TRIANGLE+'</span>');
        controller.click(toggle_full_text);
        elm.before(controller);
        elm.after('<span class="str-length">'+len+'</span>');
      }
    });
  }
  
  function move_funcs_to_end_of_list() {
    var f = $(this).parent();
    f.parent().append(f);
  }
  
  function make_json_js_view(view,single_line) {
    
    $('.function',view).each(move_funcs_to_end_of_list);
    
    // remove empty items
    /* WILL: <ul></ul> isn't valid xhtml
    $('li[key=prototype]:has(>ul:empty)',view).remove(); // remove prototype:{}
    $('li.object>ul:empty',view).replaceWith('{}');
    $('li.array>ul:empty' ,view).replaceWith('[]');
    */
    
    $('li:has(>.skipped)',view).addClass('skipped').attr('title','Object skipped, see options');
    $('.overflow',view).attr('title','Object hierarchy exceeded max_depth');
    $('>ul',view).treeview();
    
    truncate_long_strings(view);
    if (!single_line) {
      move_objects_to_newline(view); // WILL: this creates new views, should be cleaned up
    }
    
    view.click(get_path);
  }
  
  
  $.fn.json_js_view = function(single_line) {
    
    return this.each(function() {
      return make_json_js_view($(this),single_line);
    });
  };
})(jQuery);


/********************/
/* Simple Tree View */
/********************/

(function($) {
  var RIGHT_TRIANGLE = '\u25B8';
  var DOWN_TRIANGLE  = '\u25BE';
  function click_controller(e) {
    var parent = $(this).parent('li').toggleClass('closed');
    if (e.metaKey) {
      var closed = parent.hasClass('closed');
      var r = parent.find('.expandable').toggleClass('closed',closed);
    }
    // update the triangles of all controllers under our parent (pity this coudn't be done with css)
    parent.find('.controller').each(function() {
      var closed2 = $(this).parent().hasClass('closed');
      $(this).text( closed2 ? RIGHT_TRIANGLE : DOWN_TRIANGLE );
    });
  }
  $.fn.treeview = function() {
    return this.each(function() {
      $('li:has(ul)',this).addClass('expandable').prepend('<span class="controller unigeo">'+RIGHT_TRIANGLE+'</span>');
      $('.expandable',this).addClass('closed'); //everything is closed by default
      $('.controller',this).siblings('span').andSelf().click(click_controller);
    });
  };

}
)(jQuery);

