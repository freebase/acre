<acre:script>
    var params = acre.request.body_params;
    var error = null;

    try {
        if (acre.request.protocol !== "https") {
            throw {
                status: "400 Bad Request",
                code: "/api/status/error",
                message: "Must use SSL to access the keystore."
            }
        }

        if ((acre.request.method == "POST") && 
            !(acre.request.headers["x-requested-with"] || acre.form.validate_csrf_token(params["ACRE_CSRF_TOKEN"]))) {
            throw {
                status: "400 Bad Request",
                code: "/api/status/error",
                message: "Insecure POST request"
            }
        }

        if (!acre.admin.app) {
            throw {
                status: "400 Bad Request",
                code: "/api/status/error",
                message: "Hostname does not resolve to an app"
            }
        }

        var app = acre.get_metadata(acre.admin.app.path);
        var user = null;

        // Freebase apps use proxied credentials from appeditor
        if (app.source == "freebase" && params.fb_token) {
            var url = acre.freebase.googleapis_url + "/user/info";
            var res = acre.freebase.fetch(url, {
                headers: {
                    Authorization: "Bearer " + params.fb_token
                }
            });
            if (res) {
                user = res.username;
            }
        }

        // Non-freebae apps use google auth
        else if (acre.host.server == "appengine") {
            if (!appengine.user.is_user_logged_in()) {
                acre.response.status = 301;
                acre.response.set_header("location", appengine.user.create_login_url(acre.request.url));
                acre.exit();
            }
            user = appengine.user.get_current_user().email;
        }

        // Nothing worked for identifying the user...
        if (!user) {
            throw {
                status: "401 Not Authorized",
                code: "/api/status/error/auth",
                message: "You need to be logged in to access the keystore."
            };
        }

        // Now we need to verify the logged-in user is permitted to modify this app's keystore
        var is_owner = false;
        for (var i=0, len=app.owners.length; i<len; i++) {
            if (user == app.owners[i]) {
                is_owner = true;
                break;
            }
        }
        if (!is_owner) {
            throw {
                status: "403 Forbidden",
                code: "/api/status/error/auth",
                message: "You need to be an owner of this app to access the keystore (freebase admin or listed in METADATA.owners)."
            };
        }

        // Finally, we are clear to actually do something
        var action = params.action || "list";
        if (action !== "list") {
            if (!params.name) {
                throw {
                    status: "400 Bad Request",
                    code: "/api/status/error",
                    message: "Missing 'name' parameter."
                }
            }
            if (action == "add") {
                acre.keystore.put(params.name, params.token, params.secret);
            } else if (action == "remove") {
                acre.keystore.remove(params.name);
            }
        }
        var keys = acre.keystore.keys().map(function(name){
            var k = acre.keystore.get(name);
            return {
                key_id: name,
                token: k[0],
                secret: k[1]
            }
        });
    } catch(e) {
        console.log(e);
        error = e;
    }

    // Its a web service call
    if (params.format == "json") {
        var result = error || {
            status: "200 OK",
            code: "/api/status/ok",
            result: keys
        };
        acre.write(JSON.stringify(result, null, 2));
        acre.exit();
    }
</acre:script>

<html>
    <head>
        <title>Keystore Manager</title>
        <link href='/acre/static/style.css' rel='stylesheet' type='text/css'>
    </head>
    <body>
        <div id="body">
            <acre:block if="error != null">
                <h1>${error.status || "Error"}</h1>
                <p>${error.message || error}</p>
            </acre:block>
            <acre:block else="">
                <h1>Keystore Console</h1>

                <acre:block if="keys != null">
                    <h3>Existing Keys &not;</h3>
                    <ul>
                        <li acre:for="key in keys">
                            <form method="POST" action="">
                                ${acre.form.csrf_protect()}
                                <input type="hidden" name="action" value="remove">
                                <input type="hidden" name="name" value="${key.key_id}">
                                <b>${key.key_id}</b> | ${key.token} | ${key.secret} <input type="submit" name="remove" value="remove">
                            </form>
                        </li>
                    </ul>
                </acre:block>
                <acre:block else="">
                    <p>This app has no keys</p>
                </acre:block>

                <h3>Add a key &not;</h3>

                <form method="POST" action="">
                    ${acre.form.csrf_protect()}
                    <input type="hidden" name="action" value="add">
                    <table>
                        <tr><td>Name/Domain</td><td><input type="text" name="name" value=""></td></tr>
                        <tr><td>Consumer Token</td><td><input type="text" name="token" value=""></td></tr>
                        <tr><td>Consumer Secret</td><td><input type="text" name="secret" value=""></td></tr>
                    </table>
                    <div><input type="submit" value="add"></div>
                </form>
            </acre:block>
        </div>
    </body>
</html>