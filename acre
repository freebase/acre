#!/bin/sh

########################################################## 
#                  Acre Control System                   #
##########################################################

# Print Failure Info -------------------------------------
fail() {
    cat <<EOF
Unknown command: $1
Type '$0 -h' for usage.
EOF
    exit 1
}

# Print Error Info -------------------------------------
error() {
    echo "ERROR: $1"
    exit 1
}

# Print Usage Info ---------------------------------------
usage() {
    cat <<EOF
Usage: $0 [options] <command>

Available Options:
    
  -h .................. Show this help screen
  
  -c <conf> ........... The configuration file that acre should use
                        (or name in config/project.<name>.conf)
                        [default: sandbox]
                        
  -d <dir> ............ The directory to use to look for additional configuration files
                        [default: none]

  -p <port> ........... The port acre should listen to
                        [default: 8115]

  -v <level> .......... Log verbosity level (one of "FINE,INFO,WARNING,SEVERE")
                        [default: FINE]

  -w <dir> ............ War location
                        [default: _build/war]
                                                
Available Commands:

    build ............. Build Acre
    war ............... Build a WAR package of Acre to run on a regular servlet container

    run ............... Run Acre
    run_app <dir> ..... Run Acre with a local app from disk
    start ............. Start Acre as a daemon
    stop .............. Stop Acre that was started as a daemon
    zap ............... Remove the Acre PID file
    
    appengine-build ... Build a WAR package of Acre to run on Google App Engine
    appengine-run ..... Run Acre in the local Google App Engine simulator
    appengine-deploy .. Deploy Acre on Google App Engine
    appengine-rollback. Rollback a deployment that failed

    test .............. run a suite of integration tests (start acre first)
    testng ............ run the next generation suite of integration tests (start acre first)
    
    clean ............. Remove all class files
    clean-whitespace .. Normalize tabs and newlines
    distclean ......... Restore everything to checkout state
    
    setup-keystore .... Initialize the KeyStore SQL tables
    get-mysql-driver .. Obtain the MySQL JDBC Driver
    freebase_check .... basic check of the freebase api endpoint

    dist <version> .... Builds a tar.gz distribution for acre
    
EOF
    exit 0
}

check_appengine() {
    if [ -z "$APPENGINE_HOME" ]; then
        error "The APPENGINE_HOME parameter is not set in your environment. Did you install the Google AppEngine SDK for Java?"
    fi
    if [ ! -f "$APPENGINE_HOME/bin/appcfg.sh" ]; then
        error "can\'t find 'appcfg.sh' in $APPENGINE_HOME. Is this the Google AppEngine SDK for Java?"
    fi
    APPENGINE_BASE_HOST="appspot.com"
}

check_python() {
    PYTHON="`which python 2> /dev/null`"
    if [ -z "$PYTHON" ] ; then
        error "'python' needs to be installed and present in your PATH. You can download it for free at http://www.python.org/"
    fi
}

# Load Configs --------------------------------------------
load() {
    echo "Loading configurations from $1"
    cat $1 | egrep "^[A-Z]" | sed 's/^\(.*\)$/export \1/' > .`basename $1`
    . ./.`basename $1`
    rm ./.`basename $1`
}

# Get version ---------------------------------------------
get_version() {
    VERSION="$1"
    if [ -z "$VERSION" ]; then
        error "Must specify a version number"
    fi
}

# Get revision ---------------------------------------------
get_revision() {
    if [ -d ".svn" ]; then
        INFO=`svn info`
    elif [ -d ".git" ]; then
        INFO=`git svn info`
    else
        error "cannot obtain revision, exiting!"
    fi

    REVISION=`echo $INFO | sed 's/.*Revision: /r/' | sed 's/ .*//'`
}

# Get appengine application ID ---------------------------------------------
get_appid() {
    APP_ID=`cat $WAR/WEB-INF/appengine-web.xml | grep '<application>' | cut -d '>' -f 2 | cut -d '<' -f 1`
}

# ----------------------- commands --------------------------

invoke() {
    if [ -f "./bin/$SCRIPT" ]; then
        export ACTION
        export JAVA
        ./bin/$SCRIPT $COMMAND $*
        result=$?
    else
        fail "'$ACTION'"
    fi
}

appengine_build() {
    check_appengine
    ant -f build.xml -Dconfig.file=\"$CONF\" -Dsdk.dir=\"$APPENGINE_HOME\" compile-appengine || exit 1
}

check_appengine_build() {
    if [ ! -d "webapp/WEB-INF/classes/com/google/acre" ]; then
        appengine_build
    fi
}

appengine_build_config() {
    check_python
    if [ "$CONF_DIR" != "" ] && [ "$CONF" != "" ]; then
        bin/appengine-config.py -c $CONF -d $CONF_DIR
    else
        bin/appengine-config.py
    fi
}

appengine_run() {
    check_appengine
    check_appengine_build
    appengine_build_config
    echo ""
    echo "=========== Starting Acre ======================================= "
    echo ""
    echo " Freebase APIs: $ACRE_METAWEB_API_ADDR"
    echo " Trusted Mode: $ACRE_TRUSTED_MODE"
    echo " Log level: $ACRE_LOG_LEVEL"
    echo ""
    if [ "$ACRE_PORT" != "" ]; then
        APPSERVER_PARAMS="-p $ACRE_PORT"
    fi
    $APPENGINE_HOME/bin/dev_appserver.sh --disable_update_check $APPSERVER_PARAMS webapp || exit 1
}

appengine_build_war() {
    check_appengine
    check_appengine_build
    appengine_build_config
    ant -f build.xml -Dsdk.dir=\"$APPENGINE_HOME\" -Dconfig.file=\"$CONF\" -Dwar.dir=\"$WAR\" appengine-war || exit 1
}

check_appengine_build_war() {
    if [ ! -d "$WAR" ]; then
        appengine_build_war
    fi
}

appengine_deploy() {
    check_appengine
    check_appengine_build_war    

    if [ ! -f "$WAR/WEB-INF/appengine-web.xml" ]; then
        fatal "Can't deploy, the war is missing WEB-INF/appengine-web.xml"
    fi
    
    if [ "$DEPLOYED_ACRE_HOST_BASE" == "" ]; then
        get_appid
        DEPLOYED_ACRE_HOST_BASE="$APP_ID.$APPENGINE_BASE_HOST"
    fi
    
    sed -i bak "s/ACRE_HOST_BASE=.*/ACRE_HOST_BASE=$DEPLOYED_ACRE_HOST_BASE/g" "$WAR/META-INF/acre.properties"

    $APPENGINE_HOME/bin/appcfg.sh $APPENGINE_DEPLOY_PARAMS update "$WAR"

    echo ""
    echo "App is ready at http://$DEPLOYED_ACRE_HOST_BASE/"
}

appengine_rollback() {
    check_appengine
    $APPENGINE_HOME/bin/appcfg.sh $APPENGINE_DEPLOY_PARAMS rollback "$WAR"
}

# -------------------------------------------------------------------------------------

# We called without arguments print the usage -------------
[ $# -gt 0 ] || usage

# Normalize the current directory -------------------------
cd `dirname $0`

# Load default configs ------------------------------------
if [ -f "config/project.conf" ]; then
    load "config/project.conf"
else 
    error "Missing 'project.conf'"
fi

# Default Values ------------------------------------------

export CONF="sandbox"
export CONF_DIR=""
export WAR="_build/war"

# Extract the options -------------------------------------

while [ $# -ne 0 ]; do
  case "$1" in
    -h) usage;;
    
    -c) shift 
        export CONF="$1" 
        shift
        continue;;

    -d) shift 
        export CONF_DIR="$1" 
        shift
        continue;;
        
    -p) shift 
        export PORT="$1"
        shift
        continue;;
        
    -v) shift
        CLI_ACRE_LOG_LEVEL="$1"
        shift
        continue;;

    -w) shift
        export WAR="$1"
        shift
        continue;;

    -*) echo "$0: invalid option: $1" >&2
        exit 1;;
        
    *) break;;
  esac
done

# Overwrite defaults with cli config ----------------------
if [ "$CONF" != "" ]; then
    if [ "$CONF_DIR" != "" ] && [ -f "$CONF_DIR/project.$CONF.conf" ]; then
	  load "$CONF_DIR/project.$CONF.conf"
    elif [ -f $CONF ]; then
      load $CONF
    elif [ -f "config/project.$CONF.conf" ]; then
  	  load "config/project.$CONF.conf"
    else 
      error "configuration file config/project.$CONF.conf not found";
    fi
fi

# Overwrite logging property with cli config --------------
if [ "$CLI_ACRE_LOG_LEVEL" != "" ]; then
    export ACRE_LOG_LEVEL="$CLI_ACRE_LOG_LEVEL"
fi

# Overload the port if it was set -------------------------
if [ "$PORT" != "" ]; then
    export ACRE_PORT="$PORT"
fi

# Assign the wanted action --------------------------------
ACTION=$1
COMMAND=
shift

# Overwrite defaults with local configs (if present and not in the way) ------
if [ -f "config/project.local.conf" ] && [ "$ACTION" != "appengine-build-war" ]; then
    load "config/project.local.conf"
fi

# Decide what script to run based on the wanted action ----
case "$ACTION" in
    help) 
        usage;;
    run) 
        SCRIPT="start" 
        invoke;;
    build) 
        SCRIPT="build"
        COMMAND="compile" 
        invoke;;
    war) 
        SCRIPT="build" 
        COMMAND="war" 
        invoke;;
    dist) 
        SCRIPT="build" 
        COMMAND="dist" 
        get_version $1 
        get_revision
        export ANT_PARAMS="-Dversion=$VERSION -Drevision=$REVISION" 
        invoke;;
    clean) 
        SCRIPT="build"
        COMMAND="clean" 
        invoke;;
    distclean) 
        SCRIPT="build"
        COMMAND="distclean" 
        invoke;;
        
    appengine-build) 
        appengine_build;;

    appengine-build-config) 
        appengine_build_config;;
        
    appengine-run) 
        appengine_run;;
        
    appengine-build-war) 
        appengine_build_war;;

    appengine-deploy) 
        appengine_deploy;;
        
    appengine-rollback) 
        appengine_rollback;;
        
    appengine-internal-deploy) 
        APPENGINE_DEPLOY_PARAMS="-p cache.corp.google.com:3128 -s admin-console.prom.corp.google.com"
        APPENGINE_BASE_HOST="prom.corp.google.com"
        appengine_deploy;;

    appengine-internal-rollback)
        APPENGINE_DEPLOY_PARAMS="-p cache.corp.google.com:3128 -s admin-console.prom.corp.google.com"
        APPENGINE_BASE_HOST="prom.corp.google.com"
        appengine_rollback;;

    *) 
        SCRIPT="$ACTION" 
        invoke $*;;
esac

exit $result
